name: Buildroot
on: [push, pull_request]

jobs:
  buildroot:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        defconfig_name: [qemu_x86_defconfig, qemu_x86_64_defconfig, raspberrypi4_defconfig, raspberrypi4_64_defconfig, qemu_ppc64le_pseries_defconfig, qemu_mips32r2_malta_defconfig, qemu_mips64_malta_defconfig]
        libc_name: [glibc, uclibc, musl]
    steps:
      - name: Checkout Buildroot sources
        run: git clone --depth=1 --branch=2021.02.3 https://git.busybox.net/buildroot
      - name: Select latest PPP version
        working-directory: buildroot/package/pppd
        run: |
          # Allow package to build when musl libc is selected
          sed -i '/depends on !BR2_TOOLCHAIN_USES_MUSL/d' Config.in
          # Upstream version always needs OpenSSL
          sed -i '/select BR2_PACKAGE_OPENSSL/c\\select BR2_PACKAGE_OPENSSL' Config.in
          # Do not check for package hash, so there is no need to compute it
          rm pppd.hash
          # Buildroot patch is already applied upstream
          rm -f 0001-pppd-Fix-bounds-check.patch
          # Get package sources from head of master branch
          sed -i "/PPPD_VERSION =/c\\PPPD_VERSION = ${GITHUB_SHA}" pppd.mk
          sed -i '/PPPD_SITE =/c\\PPPD_SITE = https://github.com/ppp-project/ppp' pppd.mk
          sed -i '9iPPPD_SITE_METHOD = git' pppd.mk
          # Tell Buildroot to run autoreconf.sh
          sed -i '16iPPPD_AUTORECONF = YES' pppd.mk
          # Filters feature needs libpcap
          sed -i '17iPPPD_DEPENDENCIES = libpcap openssl' pppd.mk
          # Enable verbose build commands and force OpenSSL directory, otherwise the host system one might be used instead of Buildroot one
          sed -i '18iPPPD_CONF_OPTS = --disable-silent-rules --with-openssl="$(STAGING_DIR)/usr"' pppd.mk
          # Do not install build artifacts to staging directory
          sed -i 's/PPPD_INSTALL_STAGING = YES/PPPD_INSTALL_STAGING = NO/' pppd.mk
          # Delete custom configuration tool, it is now automatically handled by Buildroot
          sed -i '/PPPD_CONFIGURE_CMDS/,+4d' pppd.mk
          # Delete custom build rule, it is now generated by Autotools
          sed -i '/define PPPD_BUILD_CMDS/,+4d' pppd.mk
          # Delete custom installation to target rule, it is now generated by Autotools
          sed -i '/define PPPD_INSTALL_TARGET_CMDS/,+27d' pppd.mk
          # Delete custom staging installation rule as PPP does not need to be installed to staging in this CI
          sed -i '/define PPPD_INSTALL_STAGING_CMDS/,+3d' pppd.mk
          # Tell Buildroot that this package uses Autotools
          sed -i 's/$(eval $(generic-package))/$(eval $(autotools-package))/' pppd.mk
      - name: Enable PPP build
        working-directory: buildroot
        run: |
          # Enable all Buildroot PPP options as everything is built by upstream build system
          echo "BR2_PACKAGE_PPPD=y" >> configs/${{ matrix.defconfig_name }}
          echo "BR2_PACKAGE_PPPD_FILTER=y" >> configs/${{ matrix.defconfig_name }}
          echo "BR2_PACKAGE_PPPD_RADIUS=y" >> configs/${{ matrix.defconfig_name }}
          echo "BR2_PACKAGE_PPPD_OVERWRITE_RESOLV_CONF=y" >> configs/${{ matrix.defconfig_name }}
      - name: Select glibc
        if: ${{ matrix.libc_name == 'glibc' }}
        working-directory: buildroot
        run: echo "BR2_TOOLCHAIN_BUILDROOT_GLIBC=y" >> configs/${{ matrix.defconfig_name }}
      - name: Select uClibc
        if: ${{ matrix.libc_name == 'uclibc' }}
        working-directory: buildroot
        run: echo "BR2_TOOLCHAIN_BUILDROOT_UCLIBC=y" >> configs/${{ matrix.defconfig_name }}
      - name: Select musl
        if: ${{ matrix.libc_name == 'musl' }}
        working-directory: buildroot
        run: echo "BR2_TOOLCHAIN_BUILDROOT_MUSL=y" >> configs/${{ matrix.defconfig_name }}
      - name: Configure Buildroot
        working-directory: buildroot
        run: make ${{ matrix.defconfig_name }}
      - name: Build
        working-directory: buildroot
        run: make
